package KuramotoNetwork;

import java.util.ArrayList;

import BAModel.BA_Node;
import KuramotoUnit.Kuramoto;

public class Kuramoto_Unit extends BA_Node {
	
	protected Kuramoto k;
	
	public Kuramoto_Unit(double x, double y,
			double w, double dt, double K) {
		super(x,y);
		Kuramoto_Init(w, dt, K);
	}
	
	public Kuramoto_Unit(double[] xy, 
			double w, double dt, double K) {
		super(xy);
		Kuramoto_Init(w, dt, K);
	}
	
	private void Kuramoto_Init(double w, double dt, double K) { k = new Kuramoto(w, dt, K); }
	
	public void checkWired() {
		for(Kuramoto_Unit e: getWiredUnit()) {
			
		}
	}
	
	
	public double[] getPhj() {
		double[] r = new double[getNode().size()];
		for(int i = 0; i < r.length; i++) r[i] = getWiredUnit().get(i).getKuramoto().getPhase();
		return r;
	}
	
	public void nextStep() { for(Kuramoto_Unit e: getWiredUnit()) e.getKuramoto().nextStep(getPhj()); }
	
	public double getOrderPrm(int index) {
		double x = 0;
		double y = 0;
		double phj = getWiredUnit().get(index).getKuramoto().getPhase();
		return Math.abs(Math.sqrt(x*x + y*y));
	}
	
	public double getOrderPrm() {
		double x = 0;
		double y = 0;
		double[] phj = getPhj();
		
		for(int i = 0; i < phj.length; i++) {
			x = x + Math.sin(phj[i]);
			y = y + Math.cos(phj[i]);
		}
		return Math.abs(Math.sqrt(x*x + y*y)) / phj.length;
	}
	
	public ArrayList<Kuramoto_Unit> getWiredUnit() {
		ArrayList<Kuramoto_Unit> unit = new ArrayList<>();
		for(BA_Node e: getNode()) unit.add((Kuramoto_Unit)e);
		return unit;
	}
	
	public Kuramoto getKuramoto() { return k; }
}
